; This is a sample configuration file for Besearcher

; Specify the amount of information produced in the logs. Available
; levels are: 0 (debug), 1 (infos), 2 (warnings) and 3 (errors)
log_level = 1

; Number of seconds to wait to check for task to run or changes in this INI file
refresh_interval = 1

; The directory the app will monitor for new commits.
watch_dir = "C:\wamp\www\besearcher\"

; Directory the app will use to store results produced by issued
; commands, as well as internal info.
data_dir = "C:\wamp\www\besearcher\data\"

; The hash of the commit that the app should use as a starting point
; in the analysis (exclusive). If nothing is specified, the app will process
; all available commits.
start_commit_hash =

; If set to true, a task will only be executed if it has no existing result
; files related to it (task was already executed in the past). If set to false,
; all tasks will be executed, no matter if there are indications it has
; alreaby been executed.
skip_performed_tasks = false

; If besearcher should invoke git pull to update the data
; in the watched directory.
perform_git_pull = true

; Number of seconds to wait between each pull
; performed in "watch_dir"
git_pull_interval = 600

; Path to the git executable
git = git.exe

; Max number of concurrents tasks to be executed
max_parallel_tasks = 5

; Command to be executed when new commits arrive.
; The executed command can output special sequences of characters,
; named Besearcher Log Tags, to inform besearcher about its status,
; such as progression and results. Below is a list of possible tags.
;
; [BSR] {"type": "progress", "data": 0.1}
; [BSR] {"type": "result", "name": "Accuracy", "data": 0.1}
;
task_cmd = "ping.exe {@domain} -n {@jumps}"

; The name of the command in the system task list. If you are
; executing the cmd "ping.exe google.com", for instance, the name
; of the cmd in the system task list is "ping.exe". The name will
; be used by besearcher to count how many commands are currently
; running, so it can decide on spawning more councurrent tasks.
task_cmd_list_name = "ping.exe"

; An absolute path to the directory to be used as the working
; directory for issued commands.
task_cmd_working_dir = "C:\wamp\www\besearcher\"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This section contains the values that will be used
; to parametrize the task indicated by "task_cmd".
; Before executing the task_cmd string, besearcher will
; replace a few strings with the values informed in this
; section. Any param under this section can be used as {@name}.
; For instance, the following configuration:
;
; task_cmd = test.exe --blah={@data} {@debug} --input={@files}
;
; [task_params]
; data = hi
; debug = -d
; files[] = 1
; files[] = 2
;
; will produce the following strings to be executed:
;
; test.exe --blah=hi -d --input=1
; test.exe --blah=hi -d --input=2
;
; In that case, {@data} is replaced by the value of the param
; named "data" within the [task_cmd_params] section, as well as {@debug} is
; replaced by the value of the param "debug" (which is -d). The value
; of {@files} will be replaced by 1 and by 2, because {@files} was defined
; as an array. If more than one param is defined as an array, Besearcher
; will generate all possible permutations with the informed param values.
;
; There are special expressions that will be expanded by Besearcher, which
; makes it easy to write a lot of values with a single line. Below are
; all evailable expresions:
;
; START..END:INC
;   This expresions can be used with arrays with a single element and they
;   generate a set of numbers from START to END, incremented acording to INC.
;   E.g.
;      values[] = 0..3:1
;   will be expanded to:
;      values[] = 0
;      values[] = 1
;      values[] = 2
;      values[] = 3
;
[task_cmd_params]
domain[] = "google.com"
domain[] = "google.se"
jumps = 5
